// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// swap_cc
Rcpp::NumericMatrix swap_cc(Rcpp::NumericMatrix values, Rcpp::IntegerMatrix index);
RcppExport SEXP finmix_swap_cc(SEXP valuesSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::NumericMatrix values = Rcpp::as<Rcpp::NumericMatrix >(valuesSEXP);
        Rcpp::IntegerMatrix index = Rcpp::as<Rcpp::IntegerMatrix >(indexSEXP);
        Rcpp::NumericMatrix __result = swap_cc(values, index);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// swapInteger_cc
Rcpp::IntegerMatrix swapInteger_cc(Rcpp::IntegerMatrix values, Rcpp::IntegerMatrix index);
RcppExport SEXP finmix_swapInteger_cc(SEXP valuesSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::IntegerMatrix values = Rcpp::as<Rcpp::IntegerMatrix >(valuesSEXP);
        Rcpp::IntegerMatrix index = Rcpp::as<Rcpp::IntegerMatrix >(indexSEXP);
        Rcpp::IntegerMatrix __result = swapInteger_cc(values, index);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// swapInd_cc
Rcpp::IntegerMatrix swapInd_cc(Rcpp::IntegerMatrix values, Rcpp::IntegerMatrix index);
RcppExport SEXP finmix_swapInd_cc(SEXP valuesSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::IntegerMatrix values = Rcpp::as<Rcpp::IntegerMatrix >(valuesSEXP);
        Rcpp::IntegerMatrix index = Rcpp::as<Rcpp::IntegerMatrix >(indexSEXP);
        Rcpp::IntegerMatrix __result = swapInd_cc(values, index);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// swapST_cc
Rcpp::IntegerVector swapST_cc(Rcpp::IntegerVector values, Rcpp::IntegerMatrix index);
RcppExport SEXP finmix_swapST_cc(SEXP valuesSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::IntegerVector values = Rcpp::as<Rcpp::IntegerVector >(valuesSEXP);
        Rcpp::IntegerMatrix index = Rcpp::as<Rcpp::IntegerMatrix >(indexSEXP);
        Rcpp::IntegerVector __result = swapST_cc(values, index);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// ldgamma_cc
Rcpp::NumericMatrix ldgamma_cc(Rcpp::NumericMatrix values, Rcpp::NumericVector shape, Rcpp::NumericVector rate);
RcppExport SEXP finmix_ldgamma_cc(SEXP valuesSEXP, SEXP shapeSEXP, SEXP rateSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::NumericMatrix values = Rcpp::as<Rcpp::NumericMatrix >(valuesSEXP);
        Rcpp::NumericVector shape = Rcpp::as<Rcpp::NumericVector >(shapeSEXP);
        Rcpp::NumericVector rate = Rcpp::as<Rcpp::NumericVector >(rateSEXP);
        Rcpp::NumericMatrix __result = ldgamma_cc(values, shape, rate);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// dgamma_cc
arma::mat dgamma_cc(Rcpp::NumericMatrix values, Rcpp::NumericVector shape, Rcpp::NumericVector rate);
RcppExport SEXP finmix_dgamma_cc(SEXP valuesSEXP, SEXP shapeSEXP, SEXP rateSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::NumericMatrix values = Rcpp::as<Rcpp::NumericMatrix >(valuesSEXP);
        Rcpp::NumericVector shape = Rcpp::as<Rcpp::NumericVector >(shapeSEXP);
        Rcpp::NumericVector rate = Rcpp::as<Rcpp::NumericVector >(rateSEXP);
        arma::mat __result = dgamma_cc(values, shape, rate);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// lddirichlet_cc
Rcpp::NumericVector lddirichlet_cc(Rcpp::NumericMatrix values, Rcpp::NumericVector par);
RcppExport SEXP finmix_lddirichlet_cc(SEXP valuesSEXP, SEXP parSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::NumericMatrix values = Rcpp::as<Rcpp::NumericMatrix >(valuesSEXP);
        Rcpp::NumericVector par = Rcpp::as<Rcpp::NumericVector >(parSEXP);
        Rcpp::NumericVector __result = lddirichlet_cc(values, par);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// ddirichlet_cc
arma::vec ddirichlet_cc(Rcpp::NumericMatrix values, Rcpp::NumericVector par);
RcppExport SEXP finmix_ddirichlet_cc(SEXP valuesSEXP, SEXP parSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::NumericMatrix values = Rcpp::as<Rcpp::NumericMatrix >(valuesSEXP);
        Rcpp::NumericVector par = Rcpp::as<Rcpp::NumericVector >(parSEXP);
        arma::vec __result = ddirichlet_cc(values, par);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// maxlabel_poisson_cc
arma::imat maxlabel_poisson_cc(const arma::mat values1, const arma::mat values2, const arma::vec shape, const arma::vec rate, const arma::vec dirich, const arma::umat perm);
RcppExport SEXP finmix_maxlabel_poisson_cc(SEXP values1SEXP, SEXP values2SEXP, SEXP shapeSEXP, SEXP rateSEXP, SEXP dirichSEXP, SEXP permSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        arma::mat values1 = Rcpp::as<arma::mat >(values1SEXP);
        arma::mat values2 = Rcpp::as<arma::mat >(values2SEXP);
        arma::vec shape = Rcpp::as<arma::vec >(shapeSEXP);
        arma::vec rate = Rcpp::as<arma::vec >(rateSEXP);
        arma::vec dirich = Rcpp::as<arma::vec >(dirichSEXP);
        arma::umat perm = Rcpp::as<arma::umat >(permSEXP);
        arma::imat __result = maxlabel_poisson_cc(values1, values2, shape, rate, dirich, perm);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// hungarian_cc
arma::imat hungarian_cc(const arma::mat cost);
RcppExport SEXP finmix_hungarian_cc(SEXP costSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        arma::mat cost = Rcpp::as<arma::mat >(costSEXP);
        arma::imat __result = hungarian_cc(cost);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// stephens1997a_poisson_cc
arma::imat stephens1997a_poisson_cc(const Rcpp::NumericMatrix values1, const Rcpp::NumericMatrix values2, arma::vec pars, const arma::umat perm);
RcppExport SEXP finmix_stephens1997a_poisson_cc(SEXP values1SEXP, SEXP values2SEXP, SEXP parsSEXP, SEXP permSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::NumericMatrix values1 = Rcpp::as<Rcpp::NumericMatrix >(values1SEXP);
        Rcpp::NumericMatrix values2 = Rcpp::as<Rcpp::NumericMatrix >(values2SEXP);
        arma::vec pars = Rcpp::as<arma::vec >(parsSEXP);
        arma::umat perm = Rcpp::as<arma::umat >(permSEXP);
        arma::imat __result = stephens1997a_poisson_cc(values1, values2, pars, perm);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// stephens1997b_poisson_cc
arma::imat stephens1997b_poisson_cc(const Rcpp::NumericVector values, const Rcpp::NumericMatrix comp_par, const Rcpp::NumericMatrix weight_par);
RcppExport SEXP finmix_stephens1997b_poisson_cc(SEXP valuesSEXP, SEXP comp_parSEXP, SEXP weight_parSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::NumericVector values = Rcpp::as<Rcpp::NumericVector >(valuesSEXP);
        Rcpp::NumericMatrix comp_par = Rcpp::as<Rcpp::NumericMatrix >(comp_parSEXP);
        Rcpp::NumericMatrix weight_par = Rcpp::as<Rcpp::NumericMatrix >(weight_parSEXP);
        arma::imat __result = stephens1997b_poisson_cc(values, comp_par, weight_par);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
