// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// swap_cc
Rcpp::NumericMatrix swap_cc(Rcpp::NumericMatrix values, Rcpp::IntegerMatrix index);
RcppExport SEXP finmix_swap_cc(SEXP valuesSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type values(valuesSEXP );
        Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type index(indexSEXP );
        Rcpp::NumericMatrix __result = swap_cc(values, index);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// swapInteger_cc
Rcpp::IntegerMatrix swapInteger_cc(Rcpp::IntegerMatrix values, Rcpp::IntegerMatrix index);
RcppExport SEXP finmix_swapInteger_cc(SEXP valuesSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type values(valuesSEXP );
        Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type index(indexSEXP );
        Rcpp::IntegerMatrix __result = swapInteger_cc(values, index);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// swapInd_cc
Rcpp::IntegerMatrix swapInd_cc(Rcpp::IntegerMatrix values, Rcpp::IntegerMatrix index);
RcppExport SEXP finmix_swapInd_cc(SEXP valuesSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type values(valuesSEXP );
        Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type index(indexSEXP );
        Rcpp::IntegerMatrix __result = swapInd_cc(values, index);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// swapST_cc
Rcpp::IntegerVector swapST_cc(Rcpp::IntegerVector values, Rcpp::IntegerMatrix index);
RcppExport SEXP finmix_swapST_cc(SEXP valuesSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type values(valuesSEXP );
        Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type index(indexSEXP );
        Rcpp::IntegerVector __result = swapST_cc(values, index);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// ldgamma_cc
Rcpp::NumericMatrix ldgamma_cc(Rcpp::NumericMatrix values, Rcpp::NumericVector shape, Rcpp::NumericVector rate);
RcppExport SEXP finmix_ldgamma_cc(SEXP valuesSEXP, SEXP shapeSEXP, SEXP rateSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type values(valuesSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type shape(shapeSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rate(rateSEXP );
        Rcpp::NumericMatrix __result = ldgamma_cc(values, shape, rate);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// dgamma_cc
arma::mat dgamma_cc(Rcpp::NumericMatrix values, Rcpp::NumericVector shape, Rcpp::NumericVector rate);
RcppExport SEXP finmix_dgamma_cc(SEXP valuesSEXP, SEXP shapeSEXP, SEXP rateSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type values(valuesSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type shape(shapeSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rate(rateSEXP );
        arma::mat __result = dgamma_cc(values, shape, rate);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// lddirichlet_cc
Rcpp::NumericVector lddirichlet_cc(Rcpp::NumericMatrix values, Rcpp::NumericVector par);
RcppExport SEXP finmix_lddirichlet_cc(SEXP valuesSEXP, SEXP parSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type values(valuesSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type par(parSEXP );
        Rcpp::NumericVector __result = lddirichlet_cc(values, par);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// ddirichlet_cc
arma::vec ddirichlet_cc(Rcpp::NumericMatrix values, Rcpp::NumericVector par);
RcppExport SEXP finmix_ddirichlet_cc(SEXP valuesSEXP, SEXP parSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type values(valuesSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type par(parSEXP );
        arma::vec __result = ddirichlet_cc(values, par);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// hungarian_cc
arma::imat hungarian_cc(const arma::mat cost);
RcppExport SEXP finmix_hungarian_cc(SEXP costSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const arma::mat >::type cost(costSEXP );
        arma::imat __result = hungarian_cc(cost);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// stephens1997a_poisson_cc
arma::imat stephens1997a_poisson_cc(const Rcpp::NumericMatrix values1, const Rcpp::NumericMatrix values2, arma::vec pars, const arma::umat perm);
RcppExport SEXP finmix_stephens1997a_poisson_cc(SEXP values1SEXP, SEXP values2SEXP, SEXP parsSEXP, SEXP permSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type values1(values1SEXP );
        Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type values2(values2SEXP );
        Rcpp::traits::input_parameter< arma::vec >::type pars(parsSEXP );
        Rcpp::traits::input_parameter< const arma::umat >::type perm(permSEXP );
        arma::imat __result = stephens1997a_poisson_cc(values1, values2, pars, perm);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// stephens1997a_binomial_cc
arma::imat stephens1997a_binomial_cc(const Rcpp::NumericMatrix values1, const Rcpp::NumericMatrix values2, arma::vec pars, const arma::umat perm);
RcppExport SEXP finmix_stephens1997a_binomial_cc(SEXP values1SEXP, SEXP values2SEXP, SEXP parsSEXP, SEXP permSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type values1(values1SEXP );
        Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type values2(values2SEXP );
        Rcpp::traits::input_parameter< arma::vec >::type pars(parsSEXP );
        Rcpp::traits::input_parameter< const arma::umat >::type perm(permSEXP );
        arma::imat __result = stephens1997a_binomial_cc(values1, values2, pars, perm);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// stephens1997b_poisson_cc
arma::imat stephens1997b_poisson_cc(const Rcpp::NumericVector values, const Rcpp::NumericMatrix comp_par, const Rcpp::NumericMatrix weight_par);
RcppExport SEXP finmix_stephens1997b_poisson_cc(SEXP valuesSEXP, SEXP comp_parSEXP, SEXP weight_parSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type values(valuesSEXP );
        Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type comp_par(comp_parSEXP );
        Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type weight_par(weight_parSEXP );
        arma::imat __result = stephens1997b_poisson_cc(values, comp_par, weight_par);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// stephens1997b_binomial_cc
arma::imat stephens1997b_binomial_cc(const Rcpp::NumericVector values, const Rcpp::NumericVector reps, const Rcpp::NumericMatrix comp_par, const Rcpp::NumericMatrix weight_par);
RcppExport SEXP finmix_stephens1997b_binomial_cc(SEXP valuesSEXP, SEXP repsSEXP, SEXP comp_parSEXP, SEXP weight_parSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type values(valuesSEXP );
        Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type reps(repsSEXP );
        Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type comp_par(comp_parSEXP );
        Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type weight_par(weight_parSEXP );
        arma::imat __result = stephens1997b_binomial_cc(values, reps, comp_par, weight_par);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
